; ModuleID = 'test05.ll'
source_filename = "test05.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @plus(i32 %a, i32 %b) #0 {
entry:
  %add = add nsw i32 %a, %b
  ret i32 %add
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @minus(i32 %a, i32 %b) #0 {
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @clever(i32 %x) #0 {
entry:
  %t_fptr = alloca [2 x i32 (i32, i32)*], align 16
  %q_fptr = alloca [1 x i32 (i32, i32)*], align 8
  %r_fptr = alloca [2 x i32 (i32, i32)*], align 16
  %cmp = icmp sge i32 %x, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %t_fptr, i64 0, i64 1
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %arrayidx, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp1 = icmp sge i32 %x, 4
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %arrayidx3 = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %t_fptr, i64 0, i64 1
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %arrayidx3, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %cmp5 = icmp sge i32 %x, 5
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %if.end4
  %arrayidx7 = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %t_fptr, i64 0, i64 1
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [1 x i32 (i32, i32)*], [1 x i32 (i32, i32)*]* %q_fptr, i64 0, i64 0
  store i32 (i32, i32)* %0, i32 (i32, i32)** %arrayidx8, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %if.end4
  %cmp10 = icmp sge i32 %x, 6
  br i1 %cmp10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end9
  %arrayidx12 = getelementptr inbounds [1 x i32 (i32, i32)*], [1 x i32 (i32, i32)*]* %q_fptr, i64 0, i64 0
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %r_fptr, i64 0, i64 1
  store i32 (i32, i32)* %1, i32 (i32, i32)** %arrayidx13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %if.end9
  %arrayidx15 = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %t_fptr, i64 0, i64 1
  %2 = load i32 (i32, i32)*, i32 (i32, i32)** %arrayidx15, align 8
  %cmp16 = icmp ne i32 (i32, i32)* %2, null
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end14
  %arrayidx18 = getelementptr inbounds [2 x i32 (i32, i32)*], [2 x i32 (i32, i32)*]* %r_fptr, i64 0, i64 1
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %arrayidx18, align 8
  %call = call i32 %3(i32 1, i32 2)
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end14
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 "}
