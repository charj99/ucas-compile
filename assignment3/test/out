################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 0
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
i32 0
: {
	a,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !17
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},
################## pointer before #################
  ret i32 %add, !dbg !18
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},
1: plus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},

------------------------------
################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 2
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !20, metadata !DIExpression()), !dbg !21
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !22, metadata !DIExpression()), !dbg !23
i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
################## pointer before #################
  %sub = sub nsw i32 %0, %1, !dbg !17
i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
################## pointer before #################
  ret i32 %sub, !dbg !18
i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
2: minus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},

------------------------------
################## pointer before #################
  %af_ptr = alloca %struct.fptr, align 8
################## pointer before #################
  %a.addr = alloca i32, align 4
af_ptr: {
	i32 4
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
################## pointer before #################
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
################## pointer before #################
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !35, metadata !DIExpression()), !dbg !36
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 5
: {
	a,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 5
: {
	a,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !37, metadata !DIExpression()), !dbg !38
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !39, metadata !DIExpression()), !dbg !40
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	b,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
################## pointer before #################
  ret i32 %call, !dbg !27
i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	b,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},
3: foo------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : 
	out :  i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	b,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},

------------------------------
################## pointer before #################
  %a.addr = alloca %struct.fptr*, align 8
################## pointer before #################
  %b.addr = alloca %struct.fptr*, align 8
a.addr: {
	i32 7
,
},
################## pointer before #################
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !50, metadata !DIExpression()), !dbg !51
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !52, metadata !DIExpression()), !dbg !53
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
################## pointer before #################
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
################## pointer before #################
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},
################## pointer before #################
  ret void, !dbg !27
i32 8
: {
	b,
},
i32 7
: {
	a,
},
a: {
	b,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},
4: make_simple_alias------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : 
	out :  i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	b,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},


entry:
  %a.addr = alloca %struct.fptr*, align 8
  %b.addr = alloca %struct.fptr*, align 8
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
  ret void, !dbg !27


	in : 
	out :  i32 8
: {
	b,
},
i32 7
: {
	a,
},
a: {
	b,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},

------------------------------
################## pointer before #################
  %af_ptr = alloca i32 (i32, i32, i32 (i32, i32)*)*, align 8
################## pointer before #################
  %tf_ptr = alloca %struct.fptr, align 8
af_ptr: {
	i32 9
,
},
################## pointer before #################
  %sf_ptr = alloca %struct.fptr, align 8
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
################## pointer before #################
  %result = alloca i32, align 4
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, metadata !63, metadata !DIExpression()), !dbg !65
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  store i32 (i32, i32, i32 (i32, i32)*)* null, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !21
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %tf_ptr, metadata !66, metadata !DIExpression()), !dbg !67
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  %0 = bitcast %struct.fptr* %tf_ptr to i8*, !dbg !23
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false), !dbg !23
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %sf_ptr, metadata !68, metadata !DIExpression()), !dbg !69
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  %1 = bitcast %struct.fptr* %sf_ptr to i8*, !dbg !25
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false), !dbg !25
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !26
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
################## pointer before #################
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr, align 8, !dbg !27
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
################## pointer before #################
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %sf_ptr, i32 0, i32 0, !dbg !28
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
i32 10
: {
	minus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
################## pointer before #################
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !29
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
i32 10
: {
	minus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
################## pointer before #################
  store i32 (i32, i32, i32 (i32, i32)*)* @foo, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !30
i32 9
: {
	i32 (i32, i32, i32 (i32, i32)*)* null
,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
################## pointer before #################
  call void @make_simple_alias(%struct.fptr* %tf_ptr, %struct.fptr* %sf_ptr), !dbg !31
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %result, metadata !76, metadata !DIExpression()), !dbg !78
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
################## pointer before #################
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
################## pointer before #################
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !35
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
################## pointer before #################
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
################## pointer before #################
  %call = call i32 %2(i32 1, i32 2, i32 (i32, i32)* %3), !dbg !35
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
################## pointer before #################
  store i32 %call, i32* %result, align 4, !dbg !34
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
################## pointer before #################
  ret i32 0, !dbg !36
i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
i32 12
: {
	call,
},
5: clever------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},

	out :  i32 4
: {
	af_ptr.coerce,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	af_ptr.coerce,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	a,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	b,
},
i32 6
: {
	b,
},
i32 5
: {
	a,
},


entry:
  %a.addr = alloca %struct.fptr*, align 8
  %b.addr = alloca %struct.fptr*, align 8
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
  ret void, !dbg !27


	in : a: {
	i32 10
,
},
b: {
	i32 11
,
},

	out :  i32 8
: {
	b,
},
i32 7
: {
	a,
},
a: {
	b,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},


entry:
  %af_ptr = alloca i32 (i32, i32, i32 (i32, i32)*)*, align 8
  %tf_ptr = alloca %struct.fptr, align 8
  %sf_ptr = alloca %struct.fptr, align 8
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, metadata !11, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32, i32 (i32, i32)*)* null, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata %struct.fptr* %tf_ptr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = bitcast %struct.fptr* %tf_ptr to i8*, !dbg !23
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false), !dbg !23
  call void @llvm.dbg.declare(metadata %struct.fptr* %sf_ptr, metadata !24, metadata !DIExpression()), !dbg !25
  %1 = bitcast %struct.fptr* %sf_ptr to i8*, !dbg !25
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false), !dbg !25
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !26
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr, align 8, !dbg !27
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %sf_ptr, i32 0, i32 0, !dbg !28
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !29
  store i32 (i32, i32, i32 (i32, i32)*)* @foo, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !30
  call void @make_simple_alias(%struct.fptr* %tf_ptr, %struct.fptr* %sf_ptr), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %result, metadata !32, metadata !DIExpression()), !dbg !34
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !35
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
  %call = call i32 %2(i32 1, i32 2, i32 (i32, i32)* %3), !dbg !35
  store i32 %call, i32* %result, align 4, !dbg !34
  ret i32 0, !dbg !36


	in : 
	out :  i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
i32 12
: {
	call,
},

------------------------------
bb exist
################## pointer before #################
  %af_ptr = alloca %struct.fptr, align 8
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
################## pointer before #################
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
################## pointer before #################
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !35, metadata !DIExpression()), !dbg !36
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !37, metadata !DIExpression()), !dbg !38
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !39, metadata !DIExpression()), !dbg !40
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	i32 2
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
################## pointer before #################
  ret i32 %call, !dbg !27
i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	i32 2
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},
6: foo------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},

	out :  i32 2
: {
	a,
},
i32 3
: {
	b,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},

	out :  i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	i32 2
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},


entry:
  %a.addr = alloca %struct.fptr*, align 8
  %b.addr = alloca %struct.fptr*, align 8
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
  ret void, !dbg !27


	in : a: {
	i32 10
,
},
b: {
	i32 11
,
},

	out :  i32 8
: {
	b,
},
i32 7
: {
	a,
},
a: {
	b,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},


entry:
  %af_ptr = alloca i32 (i32, i32, i32 (i32, i32)*)*, align 8
  %tf_ptr = alloca %struct.fptr, align 8
  %sf_ptr = alloca %struct.fptr, align 8
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, metadata !11, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32, i32 (i32, i32)*)* null, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata %struct.fptr* %tf_ptr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = bitcast %struct.fptr* %tf_ptr to i8*, !dbg !23
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false), !dbg !23
  call void @llvm.dbg.declare(metadata %struct.fptr* %sf_ptr, metadata !24, metadata !DIExpression()), !dbg !25
  %1 = bitcast %struct.fptr* %sf_ptr to i8*, !dbg !25
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false), !dbg !25
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !26
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr, align 8, !dbg !27
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %sf_ptr, i32 0, i32 0, !dbg !28
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !29
  store i32 (i32, i32, i32 (i32, i32)*)* @foo, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !30
  call void @make_simple_alias(%struct.fptr* %tf_ptr, %struct.fptr* %sf_ptr), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %result, metadata !32, metadata !DIExpression()), !dbg !34
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !35
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
  %call = call i32 %2(i32 1, i32 2, i32 (i32, i32)* %3), !dbg !35
  store i32 %call, i32* %result, align 4, !dbg !34
  ret i32 0, !dbg !36


	in : 
	out :  i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
i32 12
: {
	call,
},

------------------------------
bb exist
################## pointer before #################
  %a.addr = alloca i32, align 4
a: {
	i32 1
,
},
b: {
	i32 2
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !20, metadata !DIExpression()), !dbg !21
i32 2
: {
	i32 1
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 2
: {
	i32 1
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !22, metadata !DIExpression()), !dbg !23
i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	i32 1
,
},
################## pointer before #################
  %sub = sub nsw i32 %0, %1, !dbg !17
i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	i32 1
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	i32 2
,
},
################## pointer before #################
  ret i32 %sub, !dbg !18
i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	i32 1
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	i32 2
,
},
7: minus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},

	out :  i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	i32 1
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	i32 2
,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},

	out :  i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	i32 2
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},


entry:
  %a.addr = alloca %struct.fptr*, align 8
  %b.addr = alloca %struct.fptr*, align 8
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
  ret void, !dbg !27


	in : a: {
	i32 10
,
},
b: {
	i32 11
,
},

	out :  i32 8
: {
	b,
},
i32 7
: {
	a,
},
a: {
	b,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	b,
},
p_fptr: {
	b,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	b,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	a,
},
p_fptr1: {
	a,
},


entry:
  %af_ptr = alloca i32 (i32, i32, i32 (i32, i32)*)*, align 8
  %tf_ptr = alloca %struct.fptr, align 8
  %sf_ptr = alloca %struct.fptr, align 8
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, metadata !11, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32, i32 (i32, i32)*)* null, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata %struct.fptr* %tf_ptr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = bitcast %struct.fptr* %tf_ptr to i8*, !dbg !23
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false), !dbg !23
  call void @llvm.dbg.declare(metadata %struct.fptr* %sf_ptr, metadata !24, metadata !DIExpression()), !dbg !25
  %1 = bitcast %struct.fptr* %sf_ptr to i8*, !dbg !25
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false), !dbg !25
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !26
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr, align 8, !dbg !27
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %sf_ptr, i32 0, i32 0, !dbg !28
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !29
  store i32 (i32, i32, i32 (i32, i32)*)* @foo, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !30
  call void @make_simple_alias(%struct.fptr* %tf_ptr, %struct.fptr* %sf_ptr), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %result, metadata !32, metadata !DIExpression()), !dbg !34
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !35
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
  %call = call i32 %2(i32 1, i32 2, i32 (i32, i32)* %3), !dbg !35
  store i32 %call, i32* %result, align 4, !dbg !34
  ret i32 0, !dbg !36


	in : 
	out :  i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
i32 12
: {
	call,
},

------------------------------
bb exist
################## pointer before #################
  %a.addr = alloca %struct.fptr*, align 8
a: {
	i32 10
,
},
b: {
	i32 11
,
},
################## pointer before #################
  %b.addr = alloca %struct.fptr*, align 8
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
################## pointer before #################
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !50, metadata !DIExpression()), !dbg !51
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !52, metadata !DIExpression()), !dbg !53
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
################## pointer before #################
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	i32 11
,
},
################## pointer before #################
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	i32 11
,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	i32 10
,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
i32 8
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	i32 11
,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	i32 10
,
},
p_fptr1: {
	i32 10
,
},
################## pointer before #################
  ret void, !dbg !27
i32 8
: {
	i32 11
,
},
i32 10
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	i32 11
,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	i32 10
,
},
p_fptr1: {
	i32 10
,
},
8: make_simple_alias------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %add = add nsw i32 %0, %1, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !11, metadata !DIExpression()), !dbg !12
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !13, metadata !DIExpression()), !dbg !14
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
  %sub = sub nsw i32 %0, %1, !dbg !17
  ret i32 %sub, !dbg !18


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},

	out :  i32 2
: {
	i32 1
,
},
i32 3
: {
	i32 2
,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !15
: {
	i32 1
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !16
: {
	i32 2
,
},


entry:
  %af_ptr = alloca %struct.fptr, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !19, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata %struct.fptr* %af_ptr, metadata !21, metadata !DIExpression()), !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0, !dbg !23
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
  %call = call i32 %0(i32 %1, i32 %2), !dbg !26
  ret i32 %call, !dbg !27


	in : a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},

	out :  i32 4
: {
	minus,
},
a: {
	i32 1
,
},
b: {
	i32 2
,
},
af_ptr.coerce: {
	minus,
},
af_ptr: {
	i32 4
,
},
a.addr: {
	i32 5
,
},
b.addr: {
	i32 6
,
},
coerce.dive: {
	i32 4
,
},
p_fptr: {
	i32 4
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	minus,
},
  %1 = load i32, i32* %a.addr, align 4, !dbg !24
: {
	i32 1
,
},
  %2 = load i32, i32* %b.addr, align 4, !dbg !25
: {
	i32 2
,
},
i32 6
: {
	i32 2
,
},
i32 5
: {
	i32 1
,
},


entry:
  %a.addr = alloca %struct.fptr*, align 8
  %b.addr = alloca %struct.fptr*, align 8
  store %struct.fptr* %a, %struct.fptr** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store %struct.fptr* %b, %struct.fptr** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fptr** %b.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %0, i32 0, i32 0, !dbg !23
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %2, i32 0, i32 0, !dbg !25
  store i32 (i32, i32)* %1, i32 (i32, i32)** %p_fptr1, align 8, !dbg !26
  ret void, !dbg !27


	in : a: {
	i32 10
,
},
b: {
	i32 11
,
},

	out :  i32 8
: {
	i32 11
,
},
i32 10
: {
	i32 11
,
},
i32 7
: {
	i32 10
,
},
a: {
	i32 10
,
},
b: {
	i32 11
,
},
a.addr: {
	i32 7
,
},
b.addr: {
	i32 8
,
},
  %0 = load %struct.fptr*, %struct.fptr** %b.addr, align 8, !dbg !22
: {
	i32 11
,
},
p_fptr: {
	i32 11
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8, !dbg !23
: {
	i32 11
,
},
  %2 = load %struct.fptr*, %struct.fptr** %a.addr, align 8, !dbg !24
: {
	i32 10
,
},
p_fptr1: {
	i32 10
,
},


entry:
  %af_ptr = alloca i32 (i32, i32, i32 (i32, i32)*)*, align 8
  %tf_ptr = alloca %struct.fptr, align 8
  %sf_ptr = alloca %struct.fptr, align 8
  %result = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, metadata !11, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32, i32 (i32, i32)*)* null, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !21
  call void @llvm.dbg.declare(metadata %struct.fptr* %tf_ptr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = bitcast %struct.fptr* %tf_ptr to i8*, !dbg !23
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false), !dbg !23
  call void @llvm.dbg.declare(metadata %struct.fptr* %sf_ptr, metadata !24, metadata !DIExpression()), !dbg !25
  %1 = bitcast %struct.fptr* %sf_ptr to i8*, !dbg !25
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false), !dbg !25
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !26
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr, align 8, !dbg !27
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %sf_ptr, i32 0, i32 0, !dbg !28
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !29
  store i32 (i32, i32, i32 (i32, i32)*)* @foo, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !30
  call void @make_simple_alias(%struct.fptr* %tf_ptr, %struct.fptr* %sf_ptr), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %result, metadata !32, metadata !DIExpression()), !dbg !34
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0, !dbg !35
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
  %call = call i32 %2(i32 1, i32 2, i32 (i32, i32)* %3), !dbg !35
  store i32 %call, i32* %result, align 4, !dbg !34
  ret i32 0, !dbg !36


	in : 
	out :  i32 9
: {
	foo,
},
i32 10
: {
	minus,
},
i32 11
: {
	plus,
},
af_ptr: {
	i32 9
,
},
tf_ptr: {
	i32 10
,
},
sf_ptr: {
	i32 11
,
},
result: {
	i32 12
,
},
p_fptr: {
	i32 10
,
},
p_fptr1: {
	i32 11
,
},
  %2 = load i32 (i32, i32, i32 (i32, i32)*)*, i32 (i32, i32, i32 (i32, i32)*)** %af_ptr, align 8, !dbg !35
: {
	foo,
},
coerce.dive: {
	i32 10
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8, !dbg !35
: {
	minus,
},
i32 12
: {
	call,
},

------------------------------
17: minus
31: make_simple_alias
32: foo
sh: 1: pause: not found
