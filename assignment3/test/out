################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
################## pointer before #################
  %add = add nsw i32 %a, %b, !dbg !17
################## pointer before #################
  ret i32 %add, !dbg !18
1: plus------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  
------------------------------
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !20, metadata !DIExpression()), !dbg !21
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !22, metadata !DIExpression()), !dbg !21
################## pointer before #################
  %sub = sub nsw i32 %a, %b, !dbg !17
################## pointer before #################
  ret i32 %sub, !dbg !18
2: minus------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : 
	out :  

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %sub = sub nsw i32 %a, %b, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  
------------------------------
################## pointer before #################
  call void @llvm.dbg.value(metadata i8 %x, metadata !53, metadata !DIExpression()), !dbg !54
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %op1, metadata !55, metadata !DIExpression()), !dbg !54
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %op2, metadata !56, metadata !DIExpression()), !dbg !54
################## pointer before #################
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !21
################## pointer before #################
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !59, metadata !DIExpression()), !dbg !54
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
################## pointer before #################
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %0, align 8, !dbg !24
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
################## pointer before #################
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !25
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
################## pointer before #################
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !63, metadata !DIExpression()), !dbg !54
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
################## pointer before #################
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %1, align 8, !dbg !28
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
################## pointer before #################
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !29
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
################## pointer before #################
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %2, metadata !67, metadata !DIExpression()), !dbg !54
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %conv = sext i8 %x to i32, !dbg !32
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %cmp = icmp eq i32 %conv, 43, !dbg !34
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  br i1 %cmp, label %if.then, label %if.else, !dbg !35
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !67, metadata !DIExpression()), !dbg !54
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  br label %if.end8, !dbg !36
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %conv4 = sext i8 %x to i32, !dbg !38
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !40
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !41
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !67, metadata !DIExpression()), !dbg !54
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  br label %if.end, !dbg !42
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %t_fptr.0 = phi i32 (i32, i32)** [ %1, %if.then7 ], [ %2, %if.else ], !dbg !18
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.0, metadata !67, metadata !DIExpression()), !dbg !54
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  br label %if.end8
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %t_fptr.1 = phi i32 (i32, i32)** [ %0, %if.then ], [ %t_fptr.0, %if.end ], !dbg !44
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.1, metadata !67, metadata !DIExpression()), !dbg !54
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call9 = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)** %0, i32 (i32, i32)** %t_fptr.1), !dbg !45
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !37, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !39, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !40, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !41, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !43, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !28, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !30, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !31, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !32, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %add = add nsw i32 %a, %b, !dbg !17
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  ret i32 %add, !dbg !18
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from plus
merge result
################## pointer before #################
  ret i32 %call, !dbg !23
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from foo
merge result
################## pointer before #################
  ret i32 %call, !dbg !27
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from clever
merge result
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %call9, metadata !82, metadata !DIExpression()), !dbg !54
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},
################## pointer before #################
  ret i32 0, !dbg !48
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},
3: moo------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %sub = sub nsw i32 %a, %b, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
  ret i32 %call, !dbg !23


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !22, metadata !DIExpression()), !dbg !17
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
  ret i32 %call, !dbg !27


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},


entry:
  call void @llvm.dbg.value(metadata i8 %x, metadata !17, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op1, metadata !19, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op2, metadata !20, metadata !DIExpression()), !dbg !18
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !21
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !23, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %0, align 8, !dbg !24
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !27, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %1, align 8, !dbg !28
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !29
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %2, metadata !31, metadata !DIExpression()), !dbg !18
  %conv = sext i8 %x to i32, !dbg !32
  %cmp = icmp eq i32 %conv, 43, !dbg !34
  br i1 %cmp, label %if.then, label %if.else, !dbg !35


	in : 
	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8, !dbg !36


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.else:                                          ; preds = %entry
  %conv4 = sext i8 %x to i32, !dbg !38
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !40
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !41


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end, !dbg !42


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end:                                           ; preds = %if.then7, %if.else
  %t_fptr.0 = phi i32 (i32, i32)** [ %1, %if.then7 ], [ %2, %if.else ], !dbg !18
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end8:                                          ; preds = %if.end, %if.then
  %t_fptr.1 = phi i32 (i32, i32)** [ %0, %if.then ], [ %t_fptr.0, %if.end ], !dbg !44
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.1, metadata !31, metadata !DIExpression()), !dbg !18
  %call9 = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)** %0, i32 (i32, i32)** %t_fptr.1), !dbg !45
  call void @llvm.dbg.value(metadata i32 %call9, metadata !46, metadata !DIExpression()), !dbg !18
  ret i32 0, !dbg !48


	in : t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},

------------------------------
4: malloc------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %sub = sub nsw i32 %a, %b, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
  ret i32 %call, !dbg !23


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !22, metadata !DIExpression()), !dbg !17
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
  ret i32 %call, !dbg !27


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},


entry:
  call void @llvm.dbg.value(metadata i8 %x, metadata !17, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op1, metadata !19, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op2, metadata !20, metadata !DIExpression()), !dbg !18
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !21
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !23, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %0, align 8, !dbg !24
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !27, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %1, align 8, !dbg !28
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !29
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %2, metadata !31, metadata !DIExpression()), !dbg !18
  %conv = sext i8 %x to i32, !dbg !32
  %cmp = icmp eq i32 %conv, 43, !dbg !34
  br i1 %cmp, label %if.then, label %if.else, !dbg !35


	in : 
	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8, !dbg !36


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.else:                                          ; preds = %entry
  %conv4 = sext i8 %x to i32, !dbg !38
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !40
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !41


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end, !dbg !42


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end:                                           ; preds = %if.then7, %if.else
  %t_fptr.0 = phi i32 (i32, i32)** [ %1, %if.then7 ], [ %2, %if.else ], !dbg !18
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end8:                                          ; preds = %if.end, %if.then
  %t_fptr.1 = phi i32 (i32, i32)** [ %0, %if.then ], [ %t_fptr.0, %if.end ], !dbg !44
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.1, metadata !31, metadata !DIExpression()), !dbg !18
  %call9 = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)** %0, i32 (i32, i32)** %t_fptr.1), !dbg !45
  call void @llvm.dbg.value(metadata i32 %call9, metadata !46, metadata !DIExpression()), !dbg !18
  ret i32 0, !dbg !48


	in : t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},

------------------------------
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !28, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !30, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !31, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !32, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %add = add nsw i32 %a, %b, !dbg !17
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  ret i32 %add, !dbg !18
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from plus
merge result
################## pointer before #################
  ret i32 %call, !dbg !23
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
5: foo------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %sub = sub nsw i32 %a, %b, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
  ret i32 %call, !dbg !23


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !22, metadata !DIExpression()), !dbg !17
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
  ret i32 %call, !dbg !27


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},


entry:
  call void @llvm.dbg.value(metadata i8 %x, metadata !17, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op1, metadata !19, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op2, metadata !20, metadata !DIExpression()), !dbg !18
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !21
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !23, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %0, align 8, !dbg !24
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !27, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %1, align 8, !dbg !28
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !29
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %2, metadata !31, metadata !DIExpression()), !dbg !18
  %conv = sext i8 %x to i32, !dbg !32
  %cmp = icmp eq i32 %conv, 43, !dbg !34
  br i1 %cmp, label %if.then, label %if.else, !dbg !35


	in : 
	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8, !dbg !36


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.else:                                          ; preds = %entry
  %conv4 = sext i8 %x to i32, !dbg !38
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !40
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !41


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end, !dbg !42


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end:                                           ; preds = %if.then7, %if.else
  %t_fptr.0 = phi i32 (i32, i32)** [ %1, %if.then7 ], [ %2, %if.else ], !dbg !18
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end8:                                          ; preds = %if.end, %if.then
  %t_fptr.1 = phi i32 (i32, i32)** [ %0, %if.then ], [ %t_fptr.0, %if.end ], !dbg !44
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.1, metadata !31, metadata !DIExpression()), !dbg !18
  %call9 = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)** %0, i32 (i32, i32)** %t_fptr.1), !dbg !45
  call void @llvm.dbg.value(metadata i32 %call9, metadata !46, metadata !DIExpression()), !dbg !18
  ret i32 0, !dbg !48


	in : t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},

------------------------------
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !37, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !39, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !40, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !41, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !43, metadata !DIExpression()), !dbg !38
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !28, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !30, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !31, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !32, metadata !DIExpression()), !dbg !29
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  %add = add nsw i32 %a, %b, !dbg !17
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
################## pointer before #################
  ret i32 %add, !dbg !18
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from plus
merge result
################## pointer before #################
  ret i32 %call, !dbg !23
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
returned from foo
merge result
################## pointer before #################
  ret i32 %call, !dbg !27
t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
6: clever------------------------------

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !17
  ret i32 %add, !dbg !18


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.value(metadata i32 %b, metadata !16, metadata !DIExpression()), !dbg !15
  %sub = sub nsw i32 %a, %b, !dbg !17
  ret i32 %sub, !dbg !18


	in : 
	out :  

entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
  %call = call i32 %0(i32 %a, i32 %b), !dbg !22
  ret i32 %call, !dbg !23


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


entry:
  call void @llvm.dbg.value(metadata i32 %a, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 %b, metadata !18, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %a_fptr, metadata !19, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %b_fptr, metadata !20, metadata !DIExpression()), !dbg !17
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
  call void @llvm.dbg.value(metadata i32 (i32, i32)* %0, metadata !22, metadata !DIExpression()), !dbg !17
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
  store i32 (i32, i32)* %1, i32 (i32, i32)** %a_fptr, align 8, !dbg !24
  store i32 (i32, i32)* %0, i32 (i32, i32)** %b_fptr, align 8, !dbg !25
  %call = call i32 @foo(i32 %a, i32 %b, i32 (i32, i32)** %a_fptr, i32 (i32, i32)** %b_fptr), !dbg !26
  ret i32 %call, !dbg !27


	in : t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 0
,
	i32 1
,
	i32 2
,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},


entry:
  call void @llvm.dbg.value(metadata i8 %x, metadata !17, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op1, metadata !19, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %op2, metadata !20, metadata !DIExpression()), !dbg !18
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !21
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !23, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %0, align 8, !dbg !24
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !27, metadata !DIExpression()), !dbg !18
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %1, align 8, !dbg !28
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !29
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %2, metadata !31, metadata !DIExpression()), !dbg !18
  %conv = sext i8 %x to i32, !dbg !32
  %cmp = icmp eq i32 %conv, 43, !dbg !34
  br i1 %cmp, label %if.then, label %if.else, !dbg !35


	in : 
	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8, !dbg !36


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.else:                                          ; preds = %entry
  %conv4 = sext i8 %x to i32, !dbg !38
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !40
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !41


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %1, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end, !dbg !42


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end:                                           ; preds = %if.then7, %if.else
  %t_fptr.0 = phi i32 (i32, i32)** [ %1, %if.then7 ], [ %2, %if.else ], !dbg !18
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.0, metadata !31, metadata !DIExpression()), !dbg !18
  br label %if.end8


	in : i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},


if.end8:                                          ; preds = %if.end, %if.then
  %t_fptr.1 = phi i32 (i32, i32)** [ %0, %if.then ], [ %t_fptr.0, %if.end ], !dbg !44
  call void @llvm.dbg.value(metadata i32 (i32, i32)** %t_fptr.1, metadata !31, metadata !DIExpression()), !dbg !18
  %call9 = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)** %0, i32 (i32, i32)** %t_fptr.1), !dbg !45
  call void @llvm.dbg.value(metadata i32 %call9, metadata !46, metadata !DIExpression()), !dbg !18
  ret i32 0, !dbg !48


	in : t_fptr.0: {
	i32 1
,
	i32 2
,
},
i32 1
: {
	minus,
},
i32 0
: {
	plus,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},

	out :  t_fptr.1: {
	i32 0
,
	i32 1
,
	i32 2
,
},
t_fptr.0: {
	i32 1
,
	i32 2
,
},
call: {
	add,
},
i32 3
: {
	plus,
},
i32 1
: {
	minus,
},
a: {
	op1,
},
b: {
	op2,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !21
: {
	plus,
},
call: {
	add,
},
a: {
	op1,
},
b: {
	op2,
},
a_fptr: {
	i32 0
,
},
b_fptr: {
	i32 3
,
},
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %a_fptr, align 8, !dbg !21
: {
	plus,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %b_fptr, align 8, !dbg !23
: {
	plus,
	minus,
	i32 2
,
},
i32 0
: {
	plus,
	minus,
	i32 2
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !22
: {
	i32 0
,
},
  %1 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !26
: {
	i32 1
,
},
  %2 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !30
: {
	i32 2
,
},
call9: {
	add,
},

------------------------------
22 : plus
29 : foo
34 : malloc
36 : malloc
38 : malloc
47 : clever
