################## pointer before #################
  %a.addr = alloca i32, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !21, metadata !DIExpression()), !dbg !22
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !23, metadata !DIExpression()), !dbg !24
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !26
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
: {
	a.addr,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !27
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
: {
	a.addr,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !26
: {
	b.addr,
},
################## pointer before #################
  ret i32 %add, !dbg !28
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
: {
	a.addr,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !26
: {
	b.addr,
},
1: plus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !21, metadata !DIExpression()), !dbg !22
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
  %1 = load i32, i32* %b.addr, align 4, !dbg !26
  %add = add nsw i32 %0, %1, !dbg !27
  ret i32 %add, !dbg !28


	in : plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},

	out :  plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
a.addr: {
	a.addr,
},
b.addr: {
	b.addr,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !25
: {
	a.addr,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !26
: {
	b.addr,
},

------------------------------
################## pointer before #################
  %x.addr = alloca i32, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
################## pointer before #################
  %a_fptr = alloca %struct.fptr, align 8
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
################## pointer before #################
  %b_fptr = alloca %struct.fptr, align 8
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
################## pointer before #################
  %s_fptr = alloca %struct.fsptr, align 8
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
################## pointer before #################
  %r_fptr = alloca %struct.fsptr, align 8
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
################## pointer before #################
  %w_fptr = alloca %struct.fsptr*, align 8
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
################## pointer before #################
  store i32 %x, i32* %x.addr, align 4
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !100, metadata !DIExpression()), !dbg !101
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %a_fptr, metadata !102, metadata !DIExpression()), !dbg !103
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
################## pointer before #################
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %a_fptr, i32 0, i32 0, !dbg !27
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
################## pointer before #################
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr, align 8, !dbg !28
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	a_fptr,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fptr* %b_fptr, metadata !106, metadata !DIExpression()), !dbg !107
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
################## pointer before #################
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %b_fptr, i32 0, i32 0, !dbg !31
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
################## pointer before #################
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !32
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	b_fptr,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fsptr* %s_fptr, metadata !110, metadata !DIExpression()), !dbg !111
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
################## pointer before #################
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %s_fptr, i32 0, i32 0, !dbg !35
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
################## pointer before #################
  store %struct.fptr* %a_fptr, %struct.fptr** %sptr, align 8, !dbg !36
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	s_fptr,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fsptr* %r_fptr, metadata !114, metadata !DIExpression()), !dbg !115
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	plus,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
################## pointer before #################
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %r_fptr, i32 0, i32 0, !dbg !39
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	plus,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
################## pointer before #################
  store %struct.fptr* %b_fptr, %struct.fptr** %sptr2, align 8, !dbg !40
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	plus,
},
r_fptr: {
	r_fptr,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
sptr2: {
	r_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata %struct.fsptr** %w_fptr, metadata !118, metadata !DIExpression()), !dbg !119
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	plus,
},
r_fptr: {
	minus,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
sptr2: {
	r_fptr,
},
################## pointer before #################
  %call = call noalias i8* @malloc(i64 8) #4, !dbg !43
plus: {
	plus,
},
moo: {
	moo,
},
minus: {
	minus,
},
clever: {
	clever,
},
foo: {
	foo,
},
malloc: {
	malloc,
},
x.addr: {
	x.addr,
},
a_fptr: {
	plus,
},
b_fptr: {
	minus,
},
s_fptr: {
	plus,
},
r_fptr: {
	minus,
},
w_fptr: {
	w_fptr,
},
p_fptr: {
	a_fptr,
},
p_fptr1: {
	b_fptr,
},
sptr: {
	s_fptr,
},
sptr2: {
	r_fptr,
},
assignment3: /usr/local/llvm10ra/include/llvm/ADT/ilist_iterator.h:139: llvm::ilist_iterator::reference llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::BasicBlock, true, false, void>, false, false>::operator*() const [OptionsT = llvm::ilist_detail::node_options<llvm::BasicBlock, true, false, void>, IsReverse = false, IsConst = false]: Assertion `!NodePtr->isKnownSentinel()' failed.
