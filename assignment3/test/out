################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 0
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
i32 0
: {
	a,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
i32 0
: {
	a,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !20
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},
################## pointer before #################
  ret i32 %add, !dbg !21
i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},
1: plus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},

------------------------------
################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 2
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !23, metadata !DIExpression()), !dbg !24
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !25, metadata !DIExpression()), !dbg !26
i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
################## pointer before #################
  %sub = sub nsw i32 %0, %1, !dbg !20
i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
################## pointer before #################
  ret i32 %sub, !dbg !21
i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
2: minus------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %sub = sub nsw i32 %0, %1, !dbg !20
  ret i32 %sub, !dbg !21


	in : 
	out :  i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},

------------------------------
################## pointer before #################
  %x.addr = alloca i8, align 1
################## pointer before #################
  %op1.addr = alloca i32, align 4
x.addr: {
	i32 4
,
},
################## pointer before #################
  %op2.addr = alloca i32, align 4
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
################## pointer before #################
  %a_fptr = alloca i32 (i32, i32)**, align 8
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
################## pointer before #################
  %s_fptr = alloca i32 (i32, i32)**, align 8
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
################## pointer before #################
  %t_fptr = alloca i32 (i32, i32)**, align 8
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
################## pointer before #################
  %result = alloca i32, align 4
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
################## pointer before #################
  store i8 %x, i8* %x.addr, align 1
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !78, metadata !DIExpression()), !dbg !79
i32 4
: {
	x,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  store i32 %op1, i32* %op1.addr, align 4
i32 4
: {
	x,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %op1.addr, metadata !80, metadata !DIExpression()), !dbg !81
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  store i32 %op2, i32* %op2.addr, align 4
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %op2.addr, metadata !82, metadata !DIExpression()), !dbg !83
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr, metadata !84, metadata !DIExpression()), !dbg !85
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !25
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  store i32 (i32, i32)** %0, i32 (i32, i32)*** %a_fptr, align 8, !dbg !24
i32 5
: {
	op1,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
################## pointer before #################
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %1, align 8, !dbg !28
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %s_fptr, metadata !90, metadata !DIExpression()), !dbg !91
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !31
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)** %2, i32 (i32, i32)*** %s_fptr, align 8, !dbg !30
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %3, align 8, !dbg !34
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %t_fptr, metadata !96, metadata !DIExpression()), !dbg !97
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !37
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  store i32 (i32, i32)** %4, i32 (i32, i32)*** %t_fptr, align 8, !dbg !36
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %conv = sext i8 %5 to i32, !dbg !39
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
################## pointer before #################
  %cmp = icmp eq i32 %conv, 43, !dbg !41
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
################## pointer before #################
  br i1 %cmp, label %if.then, label %if.else, !dbg !42
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
################## pointer before #################
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
################## pointer before #################
  store i32 (i32, i32)** %6, i32 (i32, i32)*** %t_fptr, align 8, !dbg !45
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  br label %if.end8, !dbg !46
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
################## pointer before #################
  %conv4 = sext i8 %7 to i32, !dbg !47
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
################## pointer before #################
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !49
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
################## pointer before #################
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !50
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
################## pointer before #################
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
################## pointer before #################
  store i32 (i32, i32)** %8, i32 (i32, i32)*** %t_fptr, align 8, !dbg !53
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  br label %if.end, !dbg !54
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  br label %if.end8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %result, metadata !116, metadata !DIExpression()), !dbg !118
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
################## pointer before #################
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
################## pointer before #################
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
################## pointer before #################
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %call9 = call i32 @clever(i32 %9, i32 %10, i32 (i32, i32)** %11, i32 (i32, i32)** %12), !dbg !62
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %t_fptr = alloca i32 (i32, i32)*, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !49, metadata !DIExpression()), !dbg !50
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !51, metadata !DIExpression()), !dbg !52
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !53, metadata !DIExpression()), !dbg !54
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !55, metadata !DIExpression()), !dbg !56
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)** %t_fptr, metadata !57, metadata !DIExpression()), !dbg !58
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %t_fptr, align 8, !dbg !25
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)* %3, i32 (i32, i32)** %4, align 8, !dbg !31
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 (i32, i32)* %5, i32 (i32, i32)** %6, align 8, !dbg !34
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %call = call i32 @foo(i32 %7, i32 %8, i32 (i32, i32)** %9, i32 (i32, i32)** %10), !dbg !39
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !34, metadata !DIExpression()), !dbg !35
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !36, metadata !DIExpression()), !dbg !37
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
################## pointer before #################
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !38, metadata !DIExpression()), !dbg !39
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
################## pointer before #################
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !40, metadata !DIExpression()), !dbg !41
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %call = call i32 %1(i32 %2, i32 %3), !dbg !28
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !20
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %add, !dbg !21
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %call, !dbg !29
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %call, !dbg !40
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  store i32 %call9, i32* %result, align 4, !dbg !57
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 0, !dbg !63
i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 10
: {
	add,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
3: moo------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %sub = sub nsw i32 %0, %1, !dbg !20
  ret i32 %sub, !dbg !21


	in : 
	out :  i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},


entry:
  %x.addr = alloca i8, align 1
  %op1.addr = alloca i32, align 4
  %op2.addr = alloca i32, align 4
  %a_fptr = alloca i32 (i32, i32)**, align 8
  %s_fptr = alloca i32 (i32, i32)**, align 8
  %t_fptr = alloca i32 (i32, i32)**, align 8
  %result = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %op1, i32* %op1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 %op2, i32* %op2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op2.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
  store i32 (i32, i32)** %0, i32 (i32, i32)*** %a_fptr, align 8, !dbg !24
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %1, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %s_fptr, metadata !29, metadata !DIExpression()), !dbg !30
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !31
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
  store i32 (i32, i32)** %2, i32 (i32, i32)*** %s_fptr, align 8, !dbg !30
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %3, align 8, !dbg !34
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %t_fptr, metadata !35, metadata !DIExpression()), !dbg !36
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !37
  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
  store i32 (i32, i32)** %4, i32 (i32, i32)*** %t_fptr, align 8, !dbg !36
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
  %conv = sext i8 %5 to i32, !dbg !39
  %cmp = icmp eq i32 %conv, 43, !dbg !41
  br i1 %cmp, label %if.then, label %if.else, !dbg !42


	in : 
	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},


if.then:                                          ; preds = %entry
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
  store i32 (i32, i32)** %6, i32 (i32, i32)*** %t_fptr, align 8, !dbg !45
  br label %if.end8, !dbg !46


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},


if.else:                                          ; preds = %entry
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
  %conv4 = sext i8 %7 to i32, !dbg !47
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !49
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !50


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},


if.then7:                                         ; preds = %if.else
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
  store i32 (i32, i32)** %8, i32 (i32, i32)*** %t_fptr, align 8, !dbg !53
  br label %if.end, !dbg !54


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end8:                                          ; preds = %if.end, %if.then
  call void @llvm.dbg.declare(metadata i32* %result, metadata !55, metadata !DIExpression()), !dbg !57
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
  %call9 = call i32 @clever(i32 %9, i32 %10, i32 (i32, i32)** %11, i32 (i32, i32)** %12), !dbg !62
  store i32 %call9, i32* %result, align 4, !dbg !57
  ret i32 0, !dbg !63


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 10
: {
	add,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},

------------------------------
4: malloc------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %sub = sub nsw i32 %0, %1, !dbg !20
  ret i32 %sub, !dbg !21


	in : 
	out :  i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},


entry:
  %x.addr = alloca i8, align 1
  %op1.addr = alloca i32, align 4
  %op2.addr = alloca i32, align 4
  %a_fptr = alloca i32 (i32, i32)**, align 8
  %s_fptr = alloca i32 (i32, i32)**, align 8
  %t_fptr = alloca i32 (i32, i32)**, align 8
  %result = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %op1, i32* %op1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 %op2, i32* %op2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op2.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
  store i32 (i32, i32)** %0, i32 (i32, i32)*** %a_fptr, align 8, !dbg !24
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %1, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %s_fptr, metadata !29, metadata !DIExpression()), !dbg !30
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !31
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
  store i32 (i32, i32)** %2, i32 (i32, i32)*** %s_fptr, align 8, !dbg !30
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %3, align 8, !dbg !34
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %t_fptr, metadata !35, metadata !DIExpression()), !dbg !36
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !37
  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
  store i32 (i32, i32)** %4, i32 (i32, i32)*** %t_fptr, align 8, !dbg !36
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
  %conv = sext i8 %5 to i32, !dbg !39
  %cmp = icmp eq i32 %conv, 43, !dbg !41
  br i1 %cmp, label %if.then, label %if.else, !dbg !42


	in : 
	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},


if.then:                                          ; preds = %entry
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
  store i32 (i32, i32)** %6, i32 (i32, i32)*** %t_fptr, align 8, !dbg !45
  br label %if.end8, !dbg !46


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},


if.else:                                          ; preds = %entry
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
  %conv4 = sext i8 %7 to i32, !dbg !47
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !49
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !50


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},


if.then7:                                         ; preds = %if.else
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
  store i32 (i32, i32)** %8, i32 (i32, i32)*** %t_fptr, align 8, !dbg !53
  br label %if.end, !dbg !54


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end8:                                          ; preds = %if.end, %if.then
  call void @llvm.dbg.declare(metadata i32* %result, metadata !55, metadata !DIExpression()), !dbg !57
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
  %call9 = call i32 @clever(i32 %9, i32 %10, i32 (i32, i32)** %11, i32 (i32, i32)** %12), !dbg !62
  store i32 %call9, i32* %result, align 4, !dbg !57
  ret i32 0, !dbg !63


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 10
: {
	add,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},

------------------------------
################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 16
,
},
################## pointer before #################
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
################## pointer before #################
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !34, metadata !DIExpression()), !dbg !35
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !36, metadata !DIExpression()), !dbg !37
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
################## pointer before #################
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !38, metadata !DIExpression()), !dbg !39
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
################## pointer before #################
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !40, metadata !DIExpression()), !dbg !41
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %call = call i32 %1(i32 %2, i32 %3), !dbg !28
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !20
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  ret i32 %add, !dbg !21
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
################## pointer before #################
  ret i32 %call, !dbg !29
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
call: {
	add,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},
5: foo------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %sub = sub nsw i32 %0, %1, !dbg !20
  ret i32 %sub, !dbg !21


	in : 
	out :  i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !20, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
  %call = call i32 %1(i32 %2, i32 %3), !dbg !28
  ret i32 %call, !dbg !29


	in : 
	out :  call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
call: {
	add,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},


entry:
  %x.addr = alloca i8, align 1
  %op1.addr = alloca i32, align 4
  %op2.addr = alloca i32, align 4
  %a_fptr = alloca i32 (i32, i32)**, align 8
  %s_fptr = alloca i32 (i32, i32)**, align 8
  %t_fptr = alloca i32 (i32, i32)**, align 8
  %result = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %op1, i32* %op1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 %op2, i32* %op2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op2.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
  store i32 (i32, i32)** %0, i32 (i32, i32)*** %a_fptr, align 8, !dbg !24
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %1, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %s_fptr, metadata !29, metadata !DIExpression()), !dbg !30
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !31
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
  store i32 (i32, i32)** %2, i32 (i32, i32)*** %s_fptr, align 8, !dbg !30
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %3, align 8, !dbg !34
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %t_fptr, metadata !35, metadata !DIExpression()), !dbg !36
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !37
  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
  store i32 (i32, i32)** %4, i32 (i32, i32)*** %t_fptr, align 8, !dbg !36
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
  %conv = sext i8 %5 to i32, !dbg !39
  %cmp = icmp eq i32 %conv, 43, !dbg !41
  br i1 %cmp, label %if.then, label %if.else, !dbg !42


	in : 
	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},


if.then:                                          ; preds = %entry
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
  store i32 (i32, i32)** %6, i32 (i32, i32)*** %t_fptr, align 8, !dbg !45
  br label %if.end8, !dbg !46


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},


if.else:                                          ; preds = %entry
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
  %conv4 = sext i8 %7 to i32, !dbg !47
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !49
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !50


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},


if.then7:                                         ; preds = %if.else
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
  store i32 (i32, i32)** %8, i32 (i32, i32)*** %t_fptr, align 8, !dbg !53
  br label %if.end, !dbg !54


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end8:                                          ; preds = %if.end, %if.then
  call void @llvm.dbg.declare(metadata i32* %result, metadata !55, metadata !DIExpression()), !dbg !57
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
  %call9 = call i32 @clever(i32 %9, i32 %10, i32 (i32, i32)** %11, i32 (i32, i32)** %12), !dbg !62
  store i32 %call9, i32* %result, align 4, !dbg !57
  ret i32 0, !dbg !63


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 10
: {
	add,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},

------------------------------
################## pointer before #################
  %a.addr = alloca i32, align 4
################## pointer before #################
  %b.addr = alloca i32, align 4
a.addr: {
	i32 11
,
},
################## pointer before #################
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
################## pointer before #################
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
################## pointer before #################
  %t_fptr = alloca i32 (i32, i32)*, align 8
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !49, metadata !DIExpression()), !dbg !50
i32 11
: {
	a,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 11
: {
	a,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !51, metadata !DIExpression()), !dbg !52
i32 12
: {
	b,
},
i32 11
: {
	a,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !53, metadata !DIExpression()), !dbg !54
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !55, metadata !DIExpression()), !dbg !56
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)** %t_fptr, metadata !57, metadata !DIExpression()), !dbg !58
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
################## pointer before #################
  store i32 (i32, i32)* %1, i32 (i32, i32)** %t_fptr, align 8, !dbg !25
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
################## pointer before #################
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  store i32 (i32, i32)* %3, i32 (i32, i32)** %4, align 8, !dbg !31
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  store i32 (i32, i32)* %5, i32 (i32, i32)** %6, align 8, !dbg !34
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %call = call i32 @foo(i32 %7, i32 %8, i32 (i32, i32)** %9, i32 (i32, i32)** %10), !dbg !39
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !34, metadata !DIExpression()), !dbg !35
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !36, metadata !DIExpression()), !dbg !37
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
################## pointer before #################
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !38, metadata !DIExpression()), !dbg !39
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
################## pointer before #################
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !40, metadata !DIExpression()), !dbg !41
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %call = call i32 %1(i32 %2, i32 %3), !dbg !28
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %a.addr = alloca i32, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %b.addr = alloca i32, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  store i32 %a, i32* %a.addr, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  store i32 %b, i32* %b.addr, align 4
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  %add = add nsw i32 %0, %1, !dbg !20
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %add, !dbg !21
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %call, !dbg !29
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
################## pointer before #################
  ret i32 %call, !dbg !40
i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
6: clever------------------------------

entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %add = add nsw i32 %0, %1, !dbg !20
  ret i32 %add, !dbg !21


	in : 
	out :  i32 1
: {
	b,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},
i32 0
: {
	a,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
  %sub = sub nsw i32 %0, %1, !dbg !20
  ret i32 %sub, !dbg !21


	in : 
	out :  i32 3
: {
	b,
},
i32 2
: {
	a,
},
a.addr: {
	i32 2
,
},
b.addr: {
	i32 3
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	a,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	b,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !20, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
  %call = call i32 %1(i32 %2, i32 %3), !dbg !28
  ret i32 %call, !dbg !29


	in : 
	out :  call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	b_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	a,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	b,
},
call: {
	add,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
i32 16
: {
	a,
},
i32 17
: {
	b,
},
i32 18
: {
	a_fptr,
},
i32 19
: {
	b_fptr,
},


entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %a_fptr.addr = alloca i32 (i32, i32)**, align 8
  %b_fptr.addr = alloca i32 (i32, i32)**, align 8
  %t_fptr = alloca i32 (i32, i32)*, align 8
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !16, metadata !DIExpression()), !dbg !17
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 (i32, i32)** %a_fptr, i32 (i32, i32)*** %a_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr.addr, metadata !20, metadata !DIExpression()), !dbg !21
  store i32 (i32, i32)** %b_fptr, i32 (i32, i32)*** %b_fptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %b_fptr.addr, metadata !22, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.declare(metadata i32 (i32, i32)** %t_fptr, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
  store i32 (i32, i32)* %1, i32 (i32, i32)** %t_fptr, align 8, !dbg !25
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
  store i32 (i32, i32)* %3, i32 (i32, i32)** %4, align 8, !dbg !31
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
  store i32 (i32, i32)* %5, i32 (i32, i32)** %6, align 8, !dbg !34
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
  %call = call i32 @foo(i32 %7, i32 %8, i32 (i32, i32)** %9, i32 (i32, i32)** %10), !dbg !39
  ret i32 %call, !dbg !40


	in : 
	out :  i32 12
: {
	b,
},
i32 11
: {
	a,
},
i32 13
: {
	a_fptr,
},
i32 14
: {
	b_fptr,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	b_fptr,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a_fptr: {
	b_fptr,
},
b_fptr: {
	a_fptr,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	a_fptr,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	a_fptr,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	b_fptr,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	b_fptr,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	a_fptr,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	a_fptr,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	b_fptr,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	a,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	b,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	a_fptr,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	b_fptr,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	a_fptr,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},


entry:
  %x.addr = alloca i8, align 1
  %op1.addr = alloca i32, align 4
  %op2.addr = alloca i32, align 4
  %a_fptr = alloca i32 (i32, i32)**, align 8
  %s_fptr = alloca i32 (i32, i32)**, align 8
  %t_fptr = alloca i32 (i32, i32)**, align 8
  %result = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i32 %op1, i32* %op1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i32 %op2, i32* %op2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op2.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %a_fptr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call noalias i8* @malloc(i64 8) #3, !dbg !25
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
  store i32 (i32, i32)** %0, i32 (i32, i32)*** %a_fptr, align 8, !dbg !24
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %1, align 8, !dbg !28
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %s_fptr, metadata !29, metadata !DIExpression()), !dbg !30
  %call1 = call noalias i8* @malloc(i64 8) #3, !dbg !31
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
  store i32 (i32, i32)** %2, i32 (i32, i32)*** %s_fptr, align 8, !dbg !30
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %3, align 8, !dbg !34
  call void @llvm.dbg.declare(metadata i32 (i32, i32)*** %t_fptr, metadata !35, metadata !DIExpression()), !dbg !36
  %call2 = call noalias i8* @malloc(i64 8) #3, !dbg !37
  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
  store i32 (i32, i32)** %4, i32 (i32, i32)*** %t_fptr, align 8, !dbg !36
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
  %conv = sext i8 %5 to i32, !dbg !39
  %cmp = icmp eq i32 %conv, 43, !dbg !41
  br i1 %cmp, label %if.then, label %if.else, !dbg !42


	in : 
	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},


if.then:                                          ; preds = %entry
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
  store i32 (i32, i32)** %6, i32 (i32, i32)*** %t_fptr, align 8, !dbg !45
  br label %if.end8, !dbg !46


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},


if.else:                                          ; preds = %entry
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
  %conv4 = sext i8 %7 to i32, !dbg !47
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !49
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !50


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},


if.then7:                                         ; preds = %if.else
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
  store i32 (i32, i32)** %8, i32 (i32, i32)*** %t_fptr, align 8, !dbg !53
  br label %if.end, !dbg !54


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},


if.end8:                                          ; preds = %if.end, %if.then
  call void @llvm.dbg.declare(metadata i32* %result, metadata !55, metadata !DIExpression()), !dbg !57
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
  %call9 = call i32 @clever(i32 %9, i32 %10, i32 (i32, i32)** %11, i32 (i32, i32)** %12), !dbg !62
  store i32 %call9, i32* %result, align 4, !dbg !57
  ret i32 0, !dbg !63


	in : i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 5
: {
	op1,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},

	out :  i32 8
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
i32 9
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 10
: {
	add,
},
i32 12
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
i32 11
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
i32 13
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
i32 14
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 5
: {
	op1,
},
call: {
	add,
},
i32 1
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
i32 7
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 4
: {
	x,
},
i32 6
: {
	op2,
},
a: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
b: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a.addr: {
	i32 0
,
},
b.addr: {
	i32 1
,
},
  %0 = load i32, i32* %a.addr, align 4, !dbg !18
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
  %1 = load i32, i32* %b.addr, align 4, !dbg !19
: {
	  %3 = load i32, i32* %b.addr, align 4, !dbg !27
,
},
a: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
b: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
a_fptr: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
b_fptr: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
a.addr: {
	i32 16
,
},
b.addr: {
	i32 17
,
},
a_fptr.addr: {
	i32 18
,
},
b_fptr.addr: {
	i32 19
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !24
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !25
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %2 = load i32, i32* %a.addr, align 4, !dbg !26
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
  %3 = load i32, i32* %b.addr, align 4, !dbg !27
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
call: {
	add,
},
a: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
b: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
a_fptr: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
b_fptr: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
a.addr: {
	i32 11
,
},
b.addr: {
	i32 12
,
},
a_fptr.addr: {
	i32 13
,
},
b_fptr.addr: {
	i32 14
,
},
t_fptr: {
	i32 15
,
},
  %0 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !26
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %0, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !28
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %2, align 8, !dbg !29
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %4 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !30
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %t_fptr, align 8, !dbg !32
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !33
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
  %7 = load i32, i32* %a.addr, align 4, !dbg !35
: {
	  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
,
},
  %8 = load i32, i32* %b.addr, align 4, !dbg !36
: {
	  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
,
},
  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
: {
	  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
,
},
  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
: {
	  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
,
},
i32 0
: {
	  %2 = load i32, i32* %a.addr, align 4, !dbg !26
,
},
x.addr: {
	i32 4
,
},
op1.addr: {
	i32 5
,
},
op2.addr: {
	i32 6
,
},
a_fptr: {
	i32 7
,
},
s_fptr: {
	i32 8
,
},
t_fptr: {
	i32 9
,
},
result: {
	i32 10
,
},
  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
: {
	plus,
},
  %1 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !27
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
: {
	minus,
},
  %3 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !33
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %5 = load i8, i8* %x.addr, align 1, !dbg !39
: {
	x,
},
  %6 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !43
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %7 = load i8, i8* %x.addr, align 1, !dbg !47
: {
	x,
},
  %8 = load i32 (i32, i32)**, i32 (i32, i32)*** %s_fptr, align 8, !dbg !51
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
},
  %9 = load i32, i32* %op1.addr, align 4, !dbg !58
: {
	op1,
},
  %10 = load i32, i32* %op2.addr, align 4, !dbg !59
: {
	op2,
},
  %11 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr, align 8, !dbg !60
: {
	  %2 = bitcast i8* %call1 to i32 (i32, i32)**, !dbg !32
,
	  %4 = bitcast i8* %call2 to i32 (i32, i32)**, !dbg !38
,
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
  %12 = load i32 (i32, i32)**, i32 (i32, i32)*** %t_fptr, align 8, !dbg !61
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
call9: {
	add,
},
i32 15
: {
	  %0 = bitcast i8* %call to i32 (i32, i32)**, !dbg !26
,
},
i32 16
: {
	  %7 = load i32, i32* %a.addr, align 4, !dbg !35
,
},
i32 17
: {
	  %8 = load i32, i32* %b.addr, align 4, !dbg !36
,
},
i32 18
: {
	  %9 = load i32 (i32, i32)**, i32 (i32, i32)*** %a_fptr.addr, align 8, !dbg !37
,
},
i32 19
: {
	  %10 = load i32 (i32, i32)**, i32 (i32, i32)*** %b_fptr.addr, align 8, !dbg !38
,
},

------------------------------
22 : plus
29 : foo
34 : malloc
36 : malloc
38 : malloc
47 : clever
