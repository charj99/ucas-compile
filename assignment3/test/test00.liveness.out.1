; Function Attrs: noinline nounwind uwtable
define dso_local i32 @plus(i32 %a, i32 %b) #0 {
entry:
  %add = add nsw i32 %a, %b
  ret i32 %add
}


entry:
  %add = add nsw i32 %a, %b
  ret i32 %add


	in : 
	out :  
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @minus(i32 %a, i32 %b) #0 {
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}


entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub


	in : 
	out :  
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @foo(i32 %a, i32 %b, i32 (i32, i32)* %a_fptr) #0 {
entry:
  %call = call i32 %a_fptr(i32 %a, i32 %b)
  ret i32 %call
}


entry:
  %call = call i32 %a_fptr(i32 %a, i32 %b)
  ret i32 %call


	in : 
	out :  
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @moo(i8 signext %x) #0 {
entry:
  %conv = sext i8 %x to i32
  %cmp = icmp eq i32 %conv, 43
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @foo(i32 1, i32 2, i32 (i32, i32)* @plus)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %pf_ptr.0 = phi i32 (i32, i32)* [ @minus, %if.then ], [ null, %entry ]
  %call2 = call i32 @foo(i32 1, i32 2, i32 (i32, i32)* %pf_ptr.0)
  ret i32 0
}


entry:
  %conv = sext i8 %x to i32
  %cmp = icmp eq i32 %conv, 43
  br i1 %cmp, label %if.then, label %if.end


	in : 
	out :  

if.then:                                          ; preds = %entry
  %call = call i32 @foo(i32 1, i32 2, i32 (i32, i32)* @plus)
  br label %if.end


	in : 
	out :  

if.end:                                           ; preds = %if.then, %entry
  %pf_ptr.0 = phi i32 (i32, i32)* [ @minus, %if.then ], [ null, %entry ]
  %call2 = call i32 @foo(i32 1, i32 2, i32 (i32, i32)* %pf_ptr.0)
  ret i32 0


	in : 
	out :  
sh: 1: pause: not found
