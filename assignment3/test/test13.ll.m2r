; ModuleID = 'test13.ll'
source_filename = "test13.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fptr = type { i32 (i32, i32)* }

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @plus(i32 %a, i32 %b) #0 {
entry:
  %add = add nsw i32 %a, %b
  ret i32 %add
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @minus(i32 %a, i32 %b) #0 {
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @clever(i32 %a, i32 %b, i32 (i32, i32)* %a_fptr.coerce) #0 {
entry:
  %a_fptr = alloca %struct.fptr, align 8
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %a_fptr, i32 0, i32 0
  store i32 (i32, i32)* %a_fptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %a_fptr, i32 0, i32 0
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8
  %call = call i32 %0(i32 %a, i32 %b)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @moo(i8 signext %x, i32 %op1, i32 %op2) #0 {
entry:
  %t_fptr = alloca %struct.fptr, align 8
  %0 = bitcast %struct.fptr* %t_fptr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false)
  %conv = sext i8 %x to i32
  %cmp = icmp eq i32 %conv, 43
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %t_fptr, i32 0, i32 0
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr, align 8
  br label %if.end7

if.else:                                          ; preds = %entry
  %conv2 = sext i8 %x to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %p_fptr6 = getelementptr inbounds %struct.fptr, %struct.fptr* %t_fptr, i32 0, i32 0
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr6, align 8
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %t_fptr, i32 0, i32 0
  %1 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8
  %call = call i32 @clever(i32 %op1, i32 %op2, i32 (i32, i32)* %1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 "}
