; ModuleID = 'test34.ll'
source_filename = "test34.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.wfsptr = type { %struct.fsptr* }
%struct.fsptr = type { %struct.fptr* }
%struct.fptr = type { i32 (i32, i32)* }

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @plus(i32 %a, i32 %b) #0 {
entry:
  %add = add nsw i32 %a, %b
  ret i32 %add
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @minus(i32 %a, i32 %b) #0 {
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_simple_alias(%struct.wfsptr* %a_fptr, %struct.fsptr* %b_fptr) #0 {
entry:
  %wfptr = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %a_fptr, i32 0, i32 0
  store %struct.fsptr* %b_fptr, %struct.fsptr** %wfptr, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_alias(%struct.wfsptr* %a_fptr, %struct.wfsptr* %b_fptr) #0 {
entry:
  %wfptr = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %b_fptr, i32 0, i32 0
  %0 = load %struct.fsptr*, %struct.fsptr** %wfptr, align 8
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %0, i32 0, i32 0
  %1 = load %struct.fptr*, %struct.fptr** %sptr, align 8
  %wfptr1 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %a_fptr, i32 0, i32 0
  %2 = load %struct.fsptr*, %struct.fsptr** %wfptr1, align 8
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %2, i32 0, i32 0
  store %struct.fptr* %1, %struct.fptr** %sptr2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @swap_w(%struct.wfsptr* %a_fptr, %struct.wfsptr* %b_fptr) #0 {
entry:
  %wftemp = alloca %struct.wfsptr, align 8
  %0 = bitcast %struct.wfsptr* %wftemp to i8*
  %1 = bitcast %struct.wfsptr* %a_fptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 8, i1 false)
  %2 = bitcast %struct.wfsptr* %a_fptr to i8*
  %3 = bitcast %struct.wfsptr* %b_fptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 8, i1 false)
  %4 = bitcast %struct.wfsptr* %b_fptr to i8*
  %5 = bitcast %struct.wfsptr* %wftemp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 8, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.fptr* @foo(i32 %a, i32 %b, %struct.wfsptr* %a_fptr, %struct.wfsptr* %b_fptr) #0 {
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %cmp1 = icmp slt i32 %b, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @swap_w(%struct.wfsptr* %a_fptr, %struct.wfsptr* %b_fptr)
  %wfptr = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %b_fptr, i32 0, i32 0
  %0 = load %struct.fsptr*, %struct.fsptr** %wfptr, align 8
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %0, i32 0, i32 0
  %1 = load %struct.fptr*, %struct.fptr** %sptr, align 8
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %1, i32 0, i32 0
  %2 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8
  %call = call i32 %2(i32 %a, i32 %b)
  %wfptr2 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %a_fptr, i32 0, i32 0
  %3 = load %struct.fsptr*, %struct.fsptr** %wfptr2, align 8
  %sptr3 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %3, i32 0, i32 0
  %4 = load %struct.fptr*, %struct.fptr** %sptr3, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %wfptr4 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %a_fptr, i32 0, i32 0
  %5 = load %struct.fsptr*, %struct.fsptr** %wfptr4, align 8
  %sptr5 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %5, i32 0, i32 0
  %6 = load %struct.fptr*, %struct.fptr** %sptr5, align 8
  %p_fptr6 = getelementptr inbounds %struct.fptr, %struct.fptr* %6, i32 0, i32 0
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr6, align 8
  %wfptr7 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %b_fptr, i32 0, i32 0
  %7 = load %struct.fsptr*, %struct.fsptr** %wfptr7, align 8
  %sptr8 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %7, i32 0, i32 0
  %8 = load %struct.fptr*, %struct.fptr** %sptr8, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi %struct.fptr* [ %4, %if.then ], [ %8, %if.end ]
  ret %struct.fptr* %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.fptr* @clever(i32 %a, i32 %b, %struct.fsptr* %a_fptr, %struct.fsptr* %b_fptr) #0 {
entry:
  %t1_fptr = alloca %struct.wfsptr, align 8
  %t2_fptr = alloca %struct.wfsptr, align 8
  call void @make_simple_alias(%struct.wfsptr* %t1_fptr, %struct.fsptr* %a_fptr)
  call void @make_simple_alias(%struct.wfsptr* %t2_fptr, %struct.fsptr* %b_fptr)
  %call = call %struct.fptr* @foo(i32 %a, i32 %b, %struct.wfsptr* %t1_fptr, %struct.wfsptr* %t2_fptr)
  ret %struct.fptr* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @moo(i8 signext %x, i32 %op1, i32 %op2) #0 {
entry:
  %a_fptr = alloca %struct.fptr, align 8
  %s_fptr = alloca %struct.fptr, align 8
  %m_fptr = alloca %struct.fsptr, align 8
  %n_fptr = alloca %struct.fsptr, align 8
  %w_fptr = alloca %struct.wfsptr, align 8
  %x_fptr = alloca %struct.wfsptr, align 8
  %k_fptr = alloca %struct.fsptr, align 8
  %y_fptr = alloca %struct.wfsptr, align 8
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %a_fptr, i32 0, i32 0
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr, align 8
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %s_fptr, i32 0, i32 0
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr1, align 8
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %m_fptr, i32 0, i32 0
  store %struct.fptr* %a_fptr, %struct.fptr** %sptr, align 8
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %n_fptr, i32 0, i32 0
  store %struct.fptr* %s_fptr, %struct.fptr** %sptr2, align 8
  call void @make_simple_alias(%struct.wfsptr* %w_fptr, %struct.fsptr* %m_fptr)
  call void @make_simple_alias(%struct.wfsptr* %x_fptr, %struct.fsptr* %n_fptr)
  %wfptr = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %y_fptr, i32 0, i32 0
  store %struct.fsptr* %k_fptr, %struct.fsptr** %wfptr, align 8
  call void @make_alias(%struct.wfsptr* %y_fptr, %struct.wfsptr* %x_fptr)
  %wfptr3 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %y_fptr, i32 0, i32 0
  %0 = load %struct.fsptr*, %struct.fsptr** %wfptr3, align 8
  %call = call %struct.fptr* @clever(i32 %op1, i32 %op2, %struct.fsptr* %m_fptr, %struct.fsptr* %0)
  %wfptr4 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %y_fptr, i32 0, i32 0
  %1 = load %struct.fsptr*, %struct.fsptr** %wfptr4, align 8
  %wfptr5 = getelementptr inbounds %struct.wfsptr, %struct.wfsptr* %x_fptr, i32 0, i32 0
  %2 = load %struct.fsptr*, %struct.fsptr** %wfptr5, align 8
  %call6 = call %struct.fptr* @clever(i32 %op1, i32 %op2, %struct.fsptr* %1, %struct.fsptr* %2)
  %p_fptr7 = getelementptr inbounds %struct.fptr, %struct.fptr* %call6, i32 0, i32 0
  %3 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr7, align 8
  %call8 = call i32 %3(i32 %op1, i32 %op2)
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 "}
