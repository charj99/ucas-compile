; ModuleID = 'test25.ll'
source_filename = "test25.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fptr = type { i32 (i32, i32)* }
%struct.fsptr = type { %struct.fptr* }

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @plus(i32 %a, i32 %b) #0 {
entry:
  %add = add nsw i32 %a, %b
  ret i32 %add
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @minus(i32 %a, i32 %b) #0 {
entry:
  %sub = sub nsw i32 %a, %b
  ret i32 %sub
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @foo(i32 %a, i32 %b, i32 (i32, i32)* %af_ptr.coerce) #0 {
entry:
  %af_ptr = alloca %struct.fptr, align 8
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  store i32 (i32, i32)* %af_ptr.coerce, i32 (i32, i32)** %coerce.dive, align 8
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %af_ptr, i32 0, i32 0
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr, align 8
  %call = call i32 %0(i32 %a, i32 %b)
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_alias(%struct.fsptr* %a, %struct.fptr* %b) #0 {
entry:
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %a, i32 0, i32 0
  store %struct.fptr* %b, %struct.fptr** %sptr, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @clever() #0 {
entry:
  %tf_ptr = alloca %struct.fptr, align 8
  %mf_ptr = alloca %struct.fptr, align 8
  %sf_ptr = alloca %struct.fsptr, align 8
  %0 = bitcast %struct.fptr* %tf_ptr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 8, i1 false)
  %1 = bitcast %struct.fptr* %mf_ptr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false)
  %2 = bitcast %struct.fsptr* %sf_ptr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 8, i1 false)
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %sf_ptr, i32 0, i32 0
  store %struct.fptr* %mf_ptr, %struct.fptr** %sptr, align 8
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %tf_ptr, i32 0, i32 0
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr, align 8
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %mf_ptr, i32 0, i32 0
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr1, align 8
  call void @make_alias(%struct.fsptr* %sf_ptr, %struct.fptr* %tf_ptr)
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %sf_ptr, i32 0, i32 0
  %3 = load %struct.fptr*, %struct.fptr** %sptr2, align 8
  %coerce.dive = getelementptr inbounds %struct.fptr, %struct.fptr* %3, i32 0, i32 0
  %4 = load i32 (i32, i32)*, i32 (i32, i32)** %coerce.dive, align 8
  %call = call i32 @foo(i32 1, i32 2, i32 (i32, i32)* %4)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 "}
